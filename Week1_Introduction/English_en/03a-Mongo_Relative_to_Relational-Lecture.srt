1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:03,980
OK, so where does MongoDB
fit in the world?

3
00:00:03,980 --> 00:00:06,840
If you think about databases and
data storage in general,

4
00:00:06,840 --> 00:00:09,510
you could think about these two
axes, one of them being

5
00:00:09,510 --> 00:00:11,880
the scalability and performance
that is offered by

6
00:00:11,880 --> 00:00:13,050
the database--

7
00:00:13,050 --> 00:00:15,420
more being better-- and the
other being the depth of

8
00:00:15,420 --> 00:00:17,580
functionality that the
database offers.

9
00:00:17,580 --> 00:00:21,330
So up here in this left-hand
corner, very scalable but not

10
00:00:21,330 --> 00:00:24,030
having very much functionality,
are programs

11
00:00:24,030 --> 00:00:28,360
like Memcached and other general
key value stores.

12
00:00:28,360 --> 00:00:32,630
And these programs are really
scalable and high-performance,

13
00:00:32,630 --> 00:00:35,590
but they just offer almost
no functionality.

14
00:00:35,590 --> 00:00:38,950
So then on the other end of the
scale, you've got really

15
00:00:38,950 --> 00:00:41,310
rich functionality
from relational

16
00:00:41,310 --> 00:00:43,050
database management systems.

17
00:00:43,050 --> 00:00:46,980
And these are your Oracles, your
DB2s, your SQL servers.

18
00:00:46,980 --> 00:00:52,110
Now the question is can we get
somewhere close to this level

19
00:00:52,110 --> 00:00:55,610
of functionality but without
giving up all the scalability

20
00:00:55,610 --> 00:00:57,230
and performance we
had over here?

21
00:00:57,230 --> 00:01:00,230
Because relational database
management systems are not

22
00:01:00,230 --> 00:01:02,710
known for being particularly
scalable.

23
00:01:02,710 --> 00:01:04,540
They scale up pretty well.

24
00:01:04,540 --> 00:01:07,400
You can add more and more
hardware to them to get higher

25
00:01:07,400 --> 00:01:08,940
performance from
a single node.

26
00:01:08,940 --> 00:01:11,610
But if you want to scale out
and use commodity hardware,

27
00:01:11,610 --> 00:01:13,120
it's not particularly
good at that.

28
00:01:13,120 --> 00:01:16,080
So MongoDB tries to
live over here.

29
00:01:16,080 --> 00:01:19,450
And the idea is to retain
most, if not all, of the

30
00:01:19,450 --> 00:01:22,730
scalability and performance
while giving you a lot of

31
00:01:22,730 --> 00:01:25,290
functionality to work with,
but not quite as much

32
00:01:25,290 --> 00:01:27,080
as you'd get here.

33
00:01:27,080 --> 00:01:30,120
So what's missing here,
between here and here?

34
00:01:30,120 --> 00:01:31,910
Well, there's a few different
things that are missing.

35
00:01:31,910 --> 00:01:35,590
One is that MongoDB does
not support joins.

36
00:01:35,590 --> 00:01:39,130
Now I talked about MongoDB
storing documents, and those

37
00:01:39,130 --> 00:01:41,750
documents, each document is
stored in a collection.

38
00:01:41,750 --> 00:01:46,420
But if you wanted to do a join
between two collections, you

39
00:01:46,420 --> 00:01:48,470
can't do it within MongoDB.

40
00:01:48,470 --> 00:01:50,860
And the reason is joins is one
of the items that scales

41
00:01:50,860 --> 00:01:53,040
particularly poorly when
you try to scale

42
00:01:53,040 --> 00:01:54,930
out to multiple nodes.

43
00:01:54,930 --> 00:01:57,820
Another piece of functionality
missing in MongoDB is

44
00:01:57,820 --> 00:01:59,330
transactions.

45
00:01:59,330 --> 00:02:03,290
Now that sounds pretty bad,
but the truth is that you

46
00:02:03,290 --> 00:02:06,915
often don't need transactions
in MongoDB in applications

47
00:02:06,915 --> 00:02:09,470
where you would need them
in a relational system.

48
00:02:09,470 --> 00:02:12,300
And the reason is that in
MongoDB, the documents are

49
00:02:12,300 --> 00:02:15,040
hierarchical, as I showed
in the earlier segment.

50
00:02:15,040 --> 00:02:17,950
And you can access those
documents atomically.

51
00:02:17,950 --> 00:02:19,910
So something that might require
multiple updates

52
00:02:19,910 --> 00:02:22,880
within a relational system can
be handled within a single

53
00:02:22,880 --> 00:02:25,930
atomic transaction within
a single document.

54
00:02:25,930 --> 00:02:28,810
So what MongoDB does not support
is transactions across

55
00:02:28,810 --> 00:02:30,090
multiple documents.

56
00:02:30,090 --> 00:02:32,320
And the reality is that most
of the world, you're not on

57
00:02:32,320 --> 00:02:35,140
the same system, so you often
need ways to deal with systems

58
00:02:35,140 --> 00:02:38,160
that are not in the same
transactional space.

59
00:02:38,160 --> 00:02:42,100
OK, it's time for a quiz Let's
talk about MongoDB relative to

60
00:02:42,100 --> 00:02:43,710
relational databases.

61
00:02:43,710 --> 00:02:47,570
Which features did MongoDB
omit in order to retain

62
00:02:47,570 --> 00:02:49,090
horizontal scalability?

63
00:02:49,090 --> 00:02:53,480
Joins, indexes, secondary
indexes, and transactions

64
00:02:53,480 --> 00:02:54,820
across multiple collections.

65
00:02:54,820 --> 00:02:56,650
So which of these did
MongoDB omit?

66
00:02:56,650 --> 00:02:57,910