1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:04,000
The final project for this class
is a web application.

3
00:00:04,000 --> 00:00:08,010
So one of the things we need
to do is get started with a

4
00:00:08,010 --> 00:00:11,930
web application framework that
we'll use for that project.

5
00:00:11,930 --> 00:00:14,330
So there's a lot of web
application frameworks for

6
00:00:14,330 --> 00:00:17,750
Java, going back to the '90s.

7
00:00:17,750 --> 00:00:18,920
So there's a lot
to choose from.

8
00:00:18,920 --> 00:00:22,310
But this is not a web
application course, so what

9
00:00:22,310 --> 00:00:25,280
our goal is for this class is to
just do the simplest things

10
00:00:25,280 --> 00:00:27,920
possible and choose a framework
that has minimal

11
00:00:27,920 --> 00:00:30,760
dependencies and is really
easy to get started.

12
00:00:30,760 --> 00:00:34,400
So after looking at a bunch of
different things, we chose a

13
00:00:34,400 --> 00:00:36,080
framework called Spark.

14
00:00:36,080 --> 00:00:37,760
It's a micro web framework.

15
00:00:37,760 --> 00:00:41,450
And the nice thing about it
is it's just dead simple.

16
00:00:41,450 --> 00:00:45,150
You don't need a web server,
an application server.

17
00:00:45,150 --> 00:00:47,000
It embeds jetty inside of it.

18
00:00:47,000 --> 00:00:49,490
So all you have to do is define
a main method for a

19
00:00:49,490 --> 00:00:51,780
class and invoke Spark.

20
00:00:51,780 --> 00:00:54,410
And it will automatically start
jetty in the background.

21
00:00:54,410 --> 00:00:57,150
And then you have your
web application.

22
00:00:57,150 --> 00:01:00,080
So like with Mongo Java driver,
we have to import it

23
00:01:00,080 --> 00:01:01,470
into our project.

24
00:01:01,470 --> 00:01:02,580
Let's figure out what the Maven

25
00:01:02,580 --> 00:01:05,470
coordinates for Spark are.

26
00:01:05,470 --> 00:01:08,170
So the first thing with Spark
is that it's not actually in

27
00:01:08,170 --> 00:01:11,820
Maven central, so we need to
tell Maven what repository to

28
00:01:11,820 --> 00:01:13,170
download it from.

29
00:01:13,170 --> 00:01:16,240
So I'm going to add a repository
section in my

30
00:01:16,240 --> 00:01:19,855
pom.xml and add the Spark
repository to it.

31
00:01:19,855 --> 00:01:21,000
And then I'm going to
actually add the

32
00:01:21,000 --> 00:01:25,100
dependency, which is here.

33
00:01:25,100 --> 00:01:26,600
So the group idea's Spark.

34
00:01:26,600 --> 00:01:27,710
The artifact is Spark.

35
00:01:27,710 --> 00:01:29,650
And the release is
0.9.9.4-SNAPSHOT.

36
00:01:29,650 --> 00:01:33,414

37
00:01:33,414 --> 00:01:37,110
And we should see that IntelliJ
added the dependency

38
00:01:37,110 --> 00:01:39,920
on Spark as well as some things
that Spark depends on,

39
00:01:39,920 --> 00:01:43,260
which is mostly jetty
and the servlet API.

40
00:01:43,260 --> 00:01:46,210
So now we're ready to write our
first Spark application.

41
00:01:46,210 --> 00:01:48,420
So I'm going to create
a class called

42
00:01:48,420 --> 00:01:50,095
Hello World Spark Style.

43
00:01:50,095 --> 00:01:53,440

44
00:01:53,440 --> 00:01:55,262
And I'm going to say
spark.get(new Route).

45
00:01:55,262 --> 00:02:02,770

46
00:02:02,770 --> 00:02:08,259
So what we're doing here is
we're calling a static method

47
00:02:08,259 --> 00:02:10,375
Spark class.

48
00:02:10,375 --> 00:02:12,150
And we're giving it a route.

49
00:02:12,150 --> 00:02:14,330
And a route is basically
just one thing.

50
00:02:14,330 --> 00:02:16,950
It's a pattern that this
route should match.

51
00:02:16,950 --> 00:02:19,640
So we're saying that this route
will match the slash

52
00:02:19,640 --> 00:02:22,795
pattern, so it's the home page
for this particular web

53
00:02:22,795 --> 00:02:23,380
application.

54
00:02:23,380 --> 00:02:27,200
And you return object, so I'm
just going to return Hello

55
00:02:27,200 --> 00:02:30,700
World Spark.

56
00:02:30,700 --> 00:02:34,280
So when you start this web app,
and you go to the slash

57
00:02:34,280 --> 00:02:37,300
URI, it will call this
handle method.

58
00:02:37,300 --> 00:02:39,890
And whatever is returned from
this handle method will be

59
00:02:39,890 --> 00:02:43,390
turned into the response
to get request.

60
00:02:43,390 --> 00:02:45,470
So let's run it.

61
00:02:45,470 --> 00:02:48,990
The default port for
Spark is 4567.

62
00:02:48,990 --> 00:02:52,660
You can change that, but we'll
just use the default for now.

63
00:02:52,660 --> 00:02:59,840
And I'll go to localhost:4567
slash, and it says Hello World

64
00:02:59,840 --> 00:03:00,730
From Spark.

65
00:03:00,730 --> 00:03:05,430
If we go somewhere else like
slash notfound, it'll 404.

66
00:03:05,430 --> 00:03:07,710
But slash goes to our handler.

67
00:03:07,710 --> 00:03:09,850
So that's pretty much
it for Spark.

68
00:03:09,850 --> 00:03:11,300
You see how easy it is.

69
00:03:11,300 --> 00:03:14,140
Just to review, we've defined
a main method we're calling

70
00:03:14,140 --> 00:03:16,860
static method get on
the Spark class.

71
00:03:16,860 --> 00:03:21,580
And we're defining one route
for the path slash and

72
00:03:21,580 --> 00:03:22,920
returning Hello World
From Spark.

73
00:03:22,920 --> 00:03:28,130
When we start the application,
it starts listing on 4567 and

74
00:03:28,130 --> 00:03:30,690
returns the webpage Hello
World From Spark.

75
00:03:30,690 --> 00:03:32,067