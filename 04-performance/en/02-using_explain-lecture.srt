1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:03,470
Now we've gone over how to
create index, and we have some

3
00:00:03,470 --> 00:00:06,910
basic understanding of when
an index will be used.

4
00:00:06,910 --> 00:00:10,160
But there is a command inside
the database, Explain, that

5
00:00:10,160 --> 00:00:12,690
will tell you exactly what
indexes were used for your

6
00:00:12,690 --> 00:00:15,290
queries and how they
were used.

7
00:00:15,290 --> 00:00:16,390
And in this lesson,
we're going to go

8
00:00:16,390 --> 00:00:18,550
over the Explain command.

9
00:00:18,550 --> 00:00:21,320
I've created a collection called
foo inside the test

10
00:00:21,320 --> 00:00:23,890
database that has 10,000
documents.

11
00:00:23,890 --> 00:00:25,220
And the documents are
pretty simple.

12
00:00:25,220 --> 00:00:26,090
They have a structure.

13
00:00:26,090 --> 00:00:27,830
They have an a, b, and c key.

14
00:00:27,830 --> 00:00:30,410
And you can see here a
is 0, b is 0, c is 0.

15
00:00:30,410 --> 00:00:34,520
And then I just increment 1,
1, 1, 2, 2, 2, et cetera.

16
00:00:34,520 --> 00:00:37,900
I put an index on this
collection, and the index is a

17
00:00:37,900 --> 00:00:40,610
compound index on a, b, and c.

18
00:00:40,610 --> 00:00:42,330
And let me scroll through
and show you

19
00:00:42,330 --> 00:00:44,580
that ensureIndex command.

20
00:00:44,580 --> 00:00:47,250
So this was the index that I
put on the collection where

21
00:00:47,250 --> 00:00:50,440
there's a, b, and
c in the index.

22
00:00:50,440 --> 00:00:53,790
And now I'm going to do a query
where I would expect

23
00:00:53,790 --> 00:00:57,920
that the database could not use
an index, so for instance,

24
00:00:57,920 --> 00:01:01,650
the query where b was
10 or something.

25
00:01:01,650 --> 00:01:03,630
So let's just do that.

26
00:01:03,630 --> 00:01:04,930
There's one.

27
00:01:04,930 --> 00:01:06,730
We'll do on where c is 1.

28
00:01:06,730 --> 00:01:09,200
That is a query where we would
expect that the database could

29
00:01:09,200 --> 00:01:10,830
not use the index.

30
00:01:10,830 --> 00:01:12,090
And we get the result.

31
00:01:12,090 --> 00:01:15,680
There's one document that
matches that criteria.

32
00:01:15,680 --> 00:01:18,040
Now we're going to call the same
exact query, but we're

33
00:01:18,040 --> 00:01:19,720
going to append an Explain on
the end, and we're going to

34
00:01:19,720 --> 00:01:21,380
look at the result.

35
00:01:21,380 --> 00:01:23,520
So I added Explain to the end.

36
00:01:23,520 --> 00:01:26,120
And now, instead of getting back
to document itself, we

37
00:01:26,120 --> 00:01:29,610
get back an explanation of
what the database did to

38
00:01:29,610 --> 00:01:30,770
perform the query.

39
00:01:30,770 --> 00:01:34,880
Now the first thing to note here
is that it says cursor

40
00:01:34,880 --> 00:01:36,390
BasicCursor.

41
00:01:36,390 --> 00:01:39,950
Now BasicCursor means that there
was no index used to

42
00:01:39,950 --> 00:01:41,350
execute this query.

43
00:01:41,350 --> 00:01:44,890
That doesn't surprise us,
because we know that we gave

44
00:01:44,890 --> 00:01:47,790
just c, and we know that the
index is a, b, and c.

45
00:01:47,790 --> 00:01:49,965
So we know that the index
couldn't be used, so it

46
00:01:49,965 --> 00:01:52,240
doesn't surprise us to
find out that it

47
00:01:52,240 --> 00:01:53,520
couldn't use the index.

48
00:01:53,520 --> 00:01:56,360
Now I'm going to go over a lot
of these fields soon, but I

49
00:01:56,360 --> 00:01:59,380
just want to bring your
attention right now to this

50
00:01:59,380 --> 00:02:02,690
millis field, which is the
number of milliseconds that

51
00:02:02,690 --> 00:02:05,130
was required to execute
the query.

52
00:02:05,130 --> 00:02:07,700
And as you know, there are
1,000 milliseconds in a

53
00:02:07,700 --> 00:02:12,200
second, so this was 3/1,000
of a second to

54
00:02:12,200 --> 00:02:13,603
execute this query.

55
00:02:13,603 --> 00:02:14,470
All right?

56
00:02:14,470 --> 00:02:16,030
That's pretty slow
for a database.

57
00:02:16,030 --> 00:02:18,300
If you want to do thousands and
thousands of operations a

58
00:02:18,300 --> 00:02:20,300
second, that's going
to be pretty slow.

59
00:02:20,300 --> 00:02:21,880
Now let's do another query.

60
00:02:21,880 --> 00:02:26,910
But this time let's have it be a
being 1, or let's say a 500.

61
00:02:26,910 --> 00:02:28,730
I won't go back and get the
document because we know

62
00:02:28,730 --> 00:02:30,320
there's one in there.

63
00:02:30,320 --> 00:02:32,840
I'll just look at the
Explain output.

64
00:02:32,840 --> 00:02:36,020
Explain output is much
longer this time.

65
00:02:36,020 --> 00:02:38,380
The first thing to note is
that it no longer says

66
00:02:38,380 --> 00:02:39,650
BasicCursor up here.

67
00:02:39,650 --> 00:02:44,130
It says that there is a
BtreeCurson, a 1, b 1, c 1

68
00:02:44,130 --> 00:02:46,460
used to perform this query.

69
00:02:46,460 --> 00:02:49,340
Now that is the name of the
index, the compound

70
00:02:49,340 --> 00:02:52,690
index, on a, b, c.

71
00:02:52,690 --> 00:02:55,890
So the first thing you note here
is that the database is

72
00:02:55,890 --> 00:02:57,670
using the index, which
is excellent.

73
00:02:57,670 --> 00:02:59,460
That's exactly what we wanted.

74
00:02:59,460 --> 00:03:02,230
Second thing to note is that
is isMultiKey is false.

75
00:03:02,230 --> 00:03:04,820
This is whether or not the index
is a multikey index.

76
00:03:04,820 --> 00:03:08,220
None of the values inside a, b,
and c are arrays, so it is

77
00:03:08,220 --> 00:03:10,040
not a multikey index.

78
00:03:10,040 --> 00:03:13,730
n 1 is the number of documents
that is returned.

79
00:03:13,730 --> 00:03:16,040
This is a simple theory
where a was 500.

80
00:03:16,040 --> 00:03:18,660
There are 10,000 documents in
this collection, and there's

81
00:03:18,660 --> 00:03:20,550
only one of them where
a is 500, so it

82
00:03:20,550 --> 00:03:23,260
returned the one document.

83
00:03:23,260 --> 00:03:26,530
nscannedObjects is the number of
documents that were scanned

84
00:03:26,530 --> 00:03:29,960
to answer the query,
which was the one.

85
00:03:29,960 --> 00:03:32,290
The index drilled down,
found the one

86
00:03:32,290 --> 00:03:34,280
document, and it was returned.

87
00:03:34,280 --> 00:03:38,650
nscanned is the number of index
entries or documents, I

88
00:03:38,650 --> 00:03:41,810
believe, that were looked
at, which, again, is 1.

89
00:03:41,810 --> 00:03:44,840
And then I won't go over some
of these, but I want to just

90
00:03:44,840 --> 00:03:46,160
point out a few of them.

91
00:03:46,160 --> 00:03:49,230
And one is that there's
this indexBounds

92
00:03:49,230 --> 00:03:50,950
element right here.

93
00:03:50,950 --> 00:03:53,640
That's one element I want to
point out, which shows the

94
00:03:53,640 --> 00:03:56,060
bounds that were used to
look up the index.

95
00:03:56,060 --> 00:03:59,910
And it's not surprising that
we looked up 500, 500, the

96
00:03:59,910 --> 00:04:03,340
lower and upper bound of 500 for
a to perform that index,

97
00:04:03,340 --> 00:04:05,890
and then the rest of them are
set to min and max element.

98
00:04:05,890 --> 00:04:07,520
Not too surprising.

99
00:04:07,520 --> 00:04:10,080
This last field that I want to
show you right now is this

100
00:04:10,080 --> 00:04:11,620
indexOnly field.

101
00:04:11,620 --> 00:04:15,950
And this indexOnly field tells
us whether or not the database

102
00:04:15,950 --> 00:04:18,910
query could be satisfied
with just the index.

103
00:04:18,910 --> 00:04:20,769
This is a concept we haven't
talked about yet.

104
00:04:20,769 --> 00:04:22,340
It's called a covered index.

105
00:04:22,340 --> 00:04:27,090
If everything you're asking for
can be satisfied with just

106
00:04:27,090 --> 00:04:30,920
the index, then the indexOnly
field will be true, and then

107
00:04:30,920 --> 00:04:33,420
the document itself didn't
have to be retrieved.

108
00:04:33,420 --> 00:04:37,310
Let's see if we can modify this
query to make that true.

109
00:04:37,310 --> 00:04:40,160
So I'm going to go back
to this query where

110
00:04:40,160 --> 00:04:42,480
I look for a 500.

111
00:04:42,480 --> 00:04:46,240
And this time what I'm
going to do is ask

112
00:04:46,240 --> 00:04:49,010
for just a is 500.

113
00:04:49,010 --> 00:04:52,540
And I'm going to ask for just
the a field and the b field,

114
00:04:52,540 --> 00:04:55,260
and I'm going to suppress
the _id field

115
00:04:55,260 --> 00:04:56,420
and not ask for that.

116
00:04:56,420 --> 00:04:57,520
Let's look at that query.

117
00:04:57,520 --> 00:04:58,460
Let's run it.

118
00:04:58,460 --> 00:04:59,600
We see there's one item.

119
00:04:59,600 --> 00:05:01,180
This is a query that should
be completely

120
00:05:01,180 --> 00:05:03,370
satisfied by the index.

121
00:05:03,370 --> 00:05:08,280
Let's call Explain and
see what we get.

122
00:05:08,280 --> 00:05:13,300
And here you can see that now
indexOnly Only is true,

123
00:05:13,300 --> 00:05:18,610
because we didn't need to go
to the actual collection to

124
00:05:18,610 --> 00:05:19,530
answer this query.

125
00:05:19,530 --> 00:05:22,810
All the information that we
needed is in the query.

126
00:05:22,810 --> 00:05:23,600
All right.

127
00:05:23,600 --> 00:05:25,780
Let's look at a slightly
different variant.

128
00:05:25,780 --> 00:05:29,600
Let's look at a query where
MongoDB cannot use the index

129
00:05:29,600 --> 00:05:32,570
for finding the documents but
it can use the index for

130
00:05:32,570 --> 00:05:34,400
sorting the documents.

131
00:05:34,400 --> 00:05:38,040
So in this query we have and
clause, and we're looking for

132
00:05:38,040 --> 00:05:40,470
c values that are greater
than 250 and less

133
00:05:40,470 --> 00:05:42,420
than or equal to 500.

134
00:05:42,420 --> 00:05:44,810
And we're going to sort by a.

135
00:05:44,810 --> 00:05:48,600
Now we know the index is on a,
b, c, so it shouldn't be able

136
00:05:48,600 --> 00:05:51,250
to use the index to find the
documents, but it should be

137
00:05:51,250 --> 00:05:53,200
able to use the index
to sort them.

138
00:05:53,200 --> 00:05:54,910
So let's see what happens
when you run that

139
00:05:54,910 --> 00:05:57,050
query and hit Explain.

140
00:05:57,050 --> 00:05:57,750
All right.

141
00:05:57,750 --> 00:06:01,580
So what we find out is that 250
documents were returned,

142
00:06:01,580 --> 00:06:03,600
which is what we'd expect.

143
00:06:03,600 --> 00:06:07,120
And it says that it uses
BtreeCursor index, but it

144
00:06:07,120 --> 00:06:09,790
didn't use it for the
actual find part for

145
00:06:09,790 --> 00:06:10,960
selecting the criteria.

146
00:06:10,960 --> 00:06:12,970
Instead it used it
for sorting.

147
00:06:12,970 --> 00:06:16,370
And the way you can tell is that
the number of scanned--

148
00:06:16,370 --> 00:06:18,030
this is index or documents--

149
00:06:18,030 --> 00:06:19,805
was 9541.

150
00:06:19,805 --> 00:06:22,710
The number of scanned
documents was 250.

151
00:06:22,710 --> 00:06:25,740
So in this case, what
MongoDB did--

152
00:06:25,740 --> 00:06:28,170
and I'm not positive about this,
but I'm pretty sure--

153
00:06:28,170 --> 00:06:29,950
that it scanned the
index itself.

154
00:06:29,950 --> 00:06:34,340
It only had a look at 9,541
index entries before it felt

155
00:06:34,340 --> 00:06:36,840
that it had gotten exhaustively
all the documents

156
00:06:36,840 --> 00:06:40,110
that were between
c 250 and c 500.

157
00:06:40,110 --> 00:06:43,550
And so then it actually went
into those 250 documents, and

158
00:06:43,550 --> 00:06:46,250
this right here is the number
of documents it touched, and

159
00:06:46,250 --> 00:06:47,670
then gave us the results.

160
00:06:47,670 --> 00:06:49,520
Let's change this around a
little bit to make it more

161
00:06:49,520 --> 00:06:51,500
clear exactly what's
happening here.

162
00:06:51,500 --> 00:06:56,330
I'm going to drop this index on
a, b, c, and I'm going to

163
00:06:56,330 --> 00:07:00,080
add a new index on just a, b.

164
00:07:00,080 --> 00:07:03,110
Now we are absolutely positive
that it can't use the index

165
00:07:03,110 --> 00:07:06,360
values for the find, even
if it scans them all.

166
00:07:06,360 --> 00:07:08,220
Now we're going to
do the same find.

167
00:07:08,220 --> 00:07:11,330
Remember, we're looking for c
greater than 250 or less than

168
00:07:11,330 --> 00:07:14,810
500, and we have an index
on only a, b.

169
00:07:14,810 --> 00:07:17,530
But we're asking to sort on a,
so it should be able to use

170
00:07:17,530 --> 00:07:19,420
the index for the sort part.

171
00:07:19,420 --> 00:07:21,640
Let's see what happens.

172
00:07:21,640 --> 00:07:24,260
In this case, the result
is more clear.

173
00:07:24,260 --> 00:07:27,030
You can see that, again, it
returned 250 documents.

174
00:07:27,030 --> 00:07:30,980
But you can see the number of
scanned index or documents is

175
00:07:30,980 --> 00:07:34,680
10,000, and the number of
scanned documents is 10,000.

176
00:07:34,680 --> 00:07:37,220
So in this case, it couldn't
use the index all, couldn't

177
00:07:37,220 --> 00:07:39,940
even scan the index to figure
out what the answer was.

178
00:07:39,940 --> 00:07:42,430
So it went right to the
collection, it's scanned them

179
00:07:42,430 --> 00:07:46,880
all, and then it was able to use
the BtreeCursor index to

180
00:07:46,880 --> 00:07:49,730
return the results
in sorted order.

181
00:07:49,730 --> 00:07:53,060
And just to show you that this
is the index on a and b, I'm

182
00:07:53,060 --> 00:07:55,870
just going to show you the
getIndexes command, which will

183
00:07:55,870 --> 00:07:58,260
show you the indexes that
are on the collection.

184
00:07:58,260 --> 00:08:02,300
You can see this collection
has the index a, b is now

185
00:08:02,300 --> 00:08:07,080
called a_1_b_1 for ascending
and ascending.

186
00:08:07,080 --> 00:08:07,390
All right.

187
00:08:07,390 --> 00:08:09,630
It is now time for a quiz.

188
00:08:09,630 --> 00:08:12,190
Given the following output from
Explain, what is the best

189
00:08:12,190 --> 00:08:14,530
description of what happened
during the query.

190
00:08:14,530 --> 00:08:17,500
And the choices are the query
used an index called

191
00:08:17,500 --> 00:08:23,750
BasicCursor and returned in
5,151 microseconds; the query

192
00:08:23,750 --> 00:08:28,500
scanned 10 million documents,
returning 10,000 in 5.2

193
00:08:28,500 --> 00:08:33,240
seconds; the query scanned
10,000 documents and returned

194
00:08:33,240 --> 00:08:37,309
in 5 milliseconds; and the
query was able to use a

195
00:08:37,309 --> 00:08:39,750
covered index to answer the
query entirely within the

196
00:08:39,750 --> 00:08:41,780
index without looking
at the documents.

197
00:08:41,780 --> 00:08:43,030

