1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:04,400
So to round out your knowledge
of retrieving data from using

3
00:00:04,400 --> 00:00:06,880
the Java driver, I want to
show you a collection of

4
00:00:06,880 --> 00:00:10,360
documents where the documents
have some internal structure,

5
00:00:10,360 --> 00:00:13,710
and then how you can query into
that internal structure

6
00:00:13,710 --> 00:00:15,940
and select into that
internal structure.

7
00:00:15,940 --> 00:00:19,920
So in this example, we have a
collection of lines, and we

8
00:00:19,920 --> 00:00:21,260
insert 10 lines.

9
00:00:21,260 --> 00:00:24,330
Just to keep the ID simple, I'm
using the value of I for

10
00:00:24,330 --> 00:00:26,660
the ID, which will be unique.

11
00:00:26,660 --> 00:00:29,560
I create two sub-documents
from my document.

12
00:00:29,560 --> 00:00:32,540
One is called Start, and
the other is End.

13
00:00:32,540 --> 00:00:35,340
And each one represents
a point, basically.

14
00:00:35,340 --> 00:00:39,450
And each point has x and
y-coordinates with a value

15
00:00:39,450 --> 00:00:42,810
between 10 and 99.

16
00:00:42,810 --> 00:00:46,180
I did that so when I print it
out, the numbers line up.

17
00:00:46,180 --> 00:00:49,320
And then I create
an empty query.

18
00:00:49,320 --> 00:00:53,950
And I do a find and print out
the results, and let's see

19
00:00:53,950 --> 00:00:57,170
what we get, so you can see what
the structure looks like.

20
00:00:57,170 --> 00:01:00,040
We have our ID, and we have
every document has a start

21
00:01:00,040 --> 00:01:03,510
document with x and y, and an
end document with x and y.

22
00:01:03,510 --> 00:01:06,570
So let's say we want to do a
query where we want to limit

23
00:01:06,570 --> 00:01:11,570
the results to all documents
where the x-value of Start is

24
00:01:11,570 --> 00:01:12,750
greater than 50.

25
00:01:12,750 --> 00:01:16,020
And I can do that using dot
notation that you learned

26
00:01:16,020 --> 00:01:17,840
earlier this week
with the shell.

27
00:01:17,840 --> 00:01:24,340
So I can say start.x
greater than 50.

28
00:01:24,340 --> 00:01:28,670
And when I run that, I only have
documents where start of

29
00:01:28,670 --> 00:01:31,190
x is greater than 50.

30
00:01:31,190 --> 00:01:34,350
So that's using dot notation
for queries.

31
00:01:34,350 --> 00:01:36,430
You can also use it for
field selection.

32
00:01:36,430 --> 00:01:41,460
So I can add a field selector
to my query, saying

33
00:01:41,460 --> 00:01:43,490
new basic db object.

34
00:01:43,490 --> 00:01:48,800
And say all we want is the
y-value of start for all

35
00:01:48,800 --> 00:01:51,405
documents where start.x
x is greater than 50.

36
00:01:51,405 --> 00:01:58,530
So I can do that just by saying
start y is true to

37
00:01:58,530 --> 00:02:00,920
include only start.y.

38
00:02:00,920 --> 00:02:03,410
Let's run that.

39
00:02:03,410 --> 00:02:06,280
Now we have start and we
only have the y-value.

40
00:02:06,280 --> 00:02:10,320
X is gone, and so is the
whole end document.

41
00:02:10,320 --> 00:02:14,240
And again, if we don't need the
ID, we can just append id,

42
00:02:14,240 --> 00:02:19,070
false, and ID will
be gone as well.

43
00:02:19,070 --> 00:02:22,260
And notice that when you do
start.y, it's not like you get

44
00:02:22,260 --> 00:02:24,250
a document that says y of 33.

45
00:02:24,250 --> 00:02:27,500
It keeps the structure, so you
still have a start document

46
00:02:27,500 --> 00:02:29,630
with a single value of y.

47
00:02:29,630 --> 00:02:31,430
OK, let's go to a quiz.

48
00:02:31,430 --> 00:02:33,600
In the following code snippet,
what do you think will happen

49
00:02:33,600 --> 00:02:35,750
if there exists in the
collection a document that

50
00:02:35,750 --> 00:02:37,950
matches the query,
but does not have

51
00:02:37,950 --> 00:02:40,830
a key called media.url?

52
00:02:40,830 --> 00:02:46,230
So the code defines a method
called findOneUrlByMediaType.

53
00:02:46,230 --> 00:02:49,210
It takes a collection of videos,
and a media type to

54
00:02:49,210 --> 00:02:50,580
search for.

55
00:02:50,580 --> 00:02:54,990
We create a query for media.type
equals whatever

56
00:02:54,990 --> 00:02:56,780
media type was passed in.

57
00:02:56,780 --> 00:03:00,720
And then the fields that we're
selecting is media.url.

58
00:03:00,720 --> 00:03:03,640
And then we return the results
of findOne for this query and

59
00:03:03,640 --> 00:03:04,800
this projection.

60
00:03:04,800 --> 00:03:05,990
So what will it do?

61
00:03:05,990 --> 00:03:07,240
Will it throw an exception?

62
00:03:07,240 --> 00:03:09,660
Will it return an
empty document?

63
00:03:09,660 --> 00:03:11,800
Will it return a document
containing a single field

64
00:03:11,800 --> 00:03:13,990
containing the document's ID?

65
00:03:13,990 --> 00:03:15,320
Or there's not enough
information to know?

66
00:03:15,320 --> 00:03:16,570