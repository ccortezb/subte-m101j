1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:01,920
So this is Jeff Yemin again.

3
00:00:01,920 --> 00:00:05,570
And I'll be talking to the next
few lectures about CRUD

4
00:00:05,570 --> 00:00:07,060
using the Java driver.

5
00:00:07,060 --> 00:00:10,180
So if you recall from Richard's
lectures about the

6
00:00:10,180 --> 00:00:15,550
shell, our operations for CRUD
are called Insert, Find,

7
00:00:15,550 --> 00:00:18,090
Update, and Remove.

8
00:00:18,090 --> 00:00:19,710
Those are the operations in the
shell, and they have the

9
00:00:19,710 --> 00:00:21,880
same names in the Java driver.

10
00:00:21,880 --> 00:00:24,120
Before we get into those, we
need to talk for a little

11
00:00:24,120 --> 00:00:26,040
while about how documents are

12
00:00:26,040 --> 00:00:28,170
represented in the Java driver.

13
00:00:28,170 --> 00:00:30,340
So one form of the
insert method

14
00:00:30,340 --> 00:00:32,110
takes a single document.

15
00:00:32,110 --> 00:00:36,190
So the question is, what is the
type of the parameter that

16
00:00:36,190 --> 00:00:37,680
we passed insert.

17
00:00:37,680 --> 00:00:41,130
So you might think at first
glance that we pass a map.

18
00:00:41,130 --> 00:00:43,030
That would be a good guess.

19
00:00:43,030 --> 00:00:46,570
And furthermore, we might think
that that is a map using

20
00:00:46,570 --> 00:00:49,616
generics of string to object.

21
00:00:49,616 --> 00:00:51,770
But there's a problem
with using map.

22
00:00:51,770 --> 00:00:55,750
And the problem is that, since
these documents are used all

23
00:00:55,750 --> 00:00:57,370
over the place, for all
the operations--

24
00:00:57,370 --> 00:00:59,060
Insert, Find, Update,
and Remove--

25
00:00:59,060 --> 00:01:01,540
in some cases, the order
of keys within the

26
00:01:01,540 --> 00:01:03,620
map actually matter.

27
00:01:03,620 --> 00:01:06,920
So since not all map
implementations guarantee the

28
00:01:06,920 --> 00:01:10,480
ordering of keys, it's a little
dangerous if we use map

29
00:01:10,480 --> 00:01:13,500
as the type of the documents.

30
00:01:13,500 --> 00:01:15,720
So we don't do that.

31
00:01:15,720 --> 00:01:18,110
The next thing you might
think is that we use an

32
00:01:18,110 --> 00:01:22,380
implementation of map the
guarantees order, like Linked

33
00:01:22,380 --> 00:01:26,040
HashMap, but that was felt to be
a little too constraining,

34
00:01:26,040 --> 00:01:28,150
because there might be some
cases where you'd want to use

35
00:01:28,150 --> 00:01:29,460
a different kind of map.

36
00:01:29,460 --> 00:01:32,130
So we don't use that either.

37
00:01:32,130 --> 00:01:37,280
What actually is used is an
interface called DBObject,

38
00:01:37,280 --> 00:01:41,020
which is an interface defined
in the Java driver.

39
00:01:41,020 --> 00:01:44,090
And DBObject is a
map-like thing.

40
00:01:44,090 --> 00:01:46,970
It has a lot of the same methods
of map, but it's not

41
00:01:46,970 --> 00:01:48,440
actually a map.

42
00:01:48,440 --> 00:01:50,130
They could have actually
implemented map, but for

43
00:01:50,130 --> 00:01:52,510
reasons that are lost
to history, it does

44
00:01:52,510 --> 00:01:53,540
not implement map.

45
00:01:53,540 --> 00:01:55,800
And at this point, it's not
possible to retrofit it

46
00:01:55,800 --> 00:01:57,810
without breaking binary
compatibility.

47
00:01:57,810 --> 00:02:00,740
But we do use DBObject,
which is an interface.

48
00:02:00,740 --> 00:02:04,610
And there is a concrete class,
which also is provided by the

49
00:02:04,610 --> 00:02:07,420
Java driver, which implements
DBObject.

50
00:02:07,420 --> 00:02:11,030
And that class is called
Basic DBObject.

51
00:02:11,030 --> 00:02:13,280
So DBObject is the type
of all the parameters

52
00:02:13,280 --> 00:02:14,770
to all these methods.

53
00:02:14,770 --> 00:02:17,660
It's used for representing
documents and also for

54
00:02:17,660 --> 00:02:20,960
representing sort criteria that
we past-defined, field

55
00:02:20,960 --> 00:02:24,420
selection for find, update
operations for update like

56
00:02:24,420 --> 00:02:26,500
dollar set, and so forth.

57
00:02:26,500 --> 00:02:30,170
So let's take a look at how
this looks in code.

58
00:02:30,170 --> 00:02:33,065
Let's create a class called
Document Representation Test.

59
00:02:33,065 --> 00:02:35,830

60
00:02:35,830 --> 00:02:37,140
And we're not going to
actually do any CRUD

61
00:02:37,140 --> 00:02:37,410
operations.

62
00:02:37,410 --> 00:02:39,890
We're just going to show you
how to create documents.

63
00:02:39,890 --> 00:02:46,480
Add a main method, and
create a variable

64
00:02:46,480 --> 00:02:47,730
of type Basic DBObject.

65
00:02:47,730 --> 00:02:51,210

66
00:02:51,210 --> 00:02:52,920
You can see that ultimately
Basic

67
00:02:52,920 --> 00:02:55,840
DBObject implements DBObject.

68
00:02:55,840 --> 00:03:00,170
And I should say furthermore
that Basic DBObject ultimately

69
00:03:00,170 --> 00:03:02,010
extends LinkedHashMap.

70
00:03:02,010 --> 00:03:04,890
And LinkedHashMap, if you don't
know this class, is a

71
00:03:04,890 --> 00:03:08,090
class that guarantees that the
order of the keys when you

72
00:03:08,090 --> 00:03:11,160
iterate is the same as
the insertion order.

73
00:03:11,160 --> 00:03:19,410
So I can do things like doc.put
and start adding

74
00:03:19,410 --> 00:03:21,310
fields and their values.

75
00:03:21,310 --> 00:03:23,410
I can use different
types, obviously.

76
00:03:23,410 --> 00:03:33,690
So I can say doc.put birth date
equals new date, some

77
00:03:33,690 --> 00:03:35,040
random date.

78
00:03:35,040 --> 00:03:36,290
I can use Booleans.

79
00:03:36,290 --> 00:03:40,120

80
00:03:40,120 --> 00:03:41,560
And I can use numbers.

81
00:03:41,560 --> 00:03:45,570

82
00:03:45,570 --> 00:03:47,610
I'm eight years old.

83
00:03:47,610 --> 00:03:49,360
That gives you a nice
flat document.

84
00:03:49,360 --> 00:03:53,020
But if you remember from
Richard's lectures, documents

85
00:03:53,020 --> 00:03:56,420
in Mongo can have nested
substructure, just like JSON.

86
00:03:56,420 --> 00:04:01,360
So I can do things like add
a raise, like this.

87
00:04:01,360 --> 00:04:02,610
Languages, all right.

88
00:04:02,610 --> 00:04:05,640

89
00:04:05,640 --> 00:04:16,850
And I can say Java, C++, and I
can also add subdocuments.

90
00:04:16,850 --> 00:04:18,800
So a subdocument is just
represented as

91
00:04:18,800 --> 00:04:21,010
another Basic DBObject.

92
00:04:21,010 --> 00:04:24,770
Let me show you a few tricks
with subdocuments here.

93
00:04:24,770 --> 00:04:27,644
I want to do this all as one
expression, so one thing I can

94
00:04:27,644 --> 00:04:33,070
do to shorten this up is I'm
going to say there's an

95
00:04:33,070 --> 00:04:36,600
address field, and it's
a subdocument.

96
00:04:36,600 --> 00:04:39,470
And one of the things you can do
with Basic DBObject in the

97
00:04:39,470 --> 00:04:42,390
constructor is [INAUDIBLE]

98
00:04:42,390 --> 00:04:45,150
initial key-in value.

99
00:04:45,150 --> 00:04:51,640
So I can say my street
is 20 Main Street.

100
00:04:51,640 --> 00:04:54,580
And then I can call a method
called append on Basic

101
00:04:54,580 --> 00:04:58,230
DBObject to append additional
values.

102
00:04:58,230 --> 00:05:04,720
So let's say town, Westfield,
append, zip.

103
00:05:04,720 --> 00:05:11,290

104
00:05:11,290 --> 00:05:14,460
And the nice thing about append
is that it just returns

105
00:05:14,460 --> 00:05:17,540
itself, which lets you chain
the append methods.

106
00:05:17,540 --> 00:05:20,910
I can create a whole complicated
document here in a

107
00:05:20,910 --> 00:05:22,330
single expression.

108
00:05:22,330 --> 00:05:24,650
So that's basically, when
it comes to document

109
00:05:24,650 --> 00:05:28,290
representation with the Java
driver, the CRUD methods that

110
00:05:28,290 --> 00:05:28,990
you'll see.

111
00:05:28,990 --> 00:05:32,130
In the upcoming lecture is Tic
DBObjects and the Fine Method

112
00:05:32,130 --> 00:05:33,140
returns DBObject.

113
00:05:33,140 --> 00:05:35,080
But when you actually want to
create new instances of

114
00:05:35,080 --> 00:05:39,500
DBObject, you would typically
create instances of the class

115
00:05:39,500 --> 00:05:42,540
Basic DBObject, which is a
LinkedHashMap that guarantees

116
00:05:42,540 --> 00:05:45,200
the ordering of the keys.

117
00:05:45,200 --> 00:05:48,020
I think it's time
for a quiz now.

118
00:05:48,020 --> 00:05:50,050
How would you create a document
using the Java driver

119
00:05:50,050 --> 00:05:52,350
with this JSON structure?

120
00:05:52,350 --> 00:05:57,090
An _id field with the value
user1, and an interests field

121
00:05:57,090 --> 00:05:59,730
with a value that's an array
with two values--

122
00:05:59,730 --> 00:06:00,980
basketball and drumming.

123
00:06:00,980 --> 00:06:02,150