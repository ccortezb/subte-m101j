1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:02,590
The next topic I want you talk
to you about is a little bit

3
00:00:02,590 --> 00:00:04,420
outside of schema design.

4
00:00:04,420 --> 00:00:07,250
And it's the topic of how
do you store large

5
00:00:07,250 --> 00:00:09,440
files within MongoDB?

6
00:00:09,440 --> 00:00:12,920
These are files that are larger
than 16 megabytes.

7
00:00:12,920 --> 00:00:15,900
So there's a 16 megabyte
document limit within MongoDB.

8
00:00:15,900 --> 00:00:17,740
And if you want to store
something larger than 16

9
00:00:17,740 --> 00:00:19,770
megabytes, you need
a way to do it.

10
00:00:19,770 --> 00:00:23,530
And GridFS is the way you store
these large objects

11
00:00:23,530 --> 00:00:24,700
within MongoDB.

12
00:00:24,700 --> 00:00:27,720
And these objects are sometimes
also called blobs.

13
00:00:27,720 --> 00:00:30,930
Now MongoDB has a facility
called GridFS.

14
00:00:30,930 --> 00:00:34,370
And GridFS will break a large
blob into pieces for you and

15
00:00:34,370 --> 00:00:36,570
store it into some
collections.

16
00:00:36,570 --> 00:00:38,230
So how does it work?

17
00:00:38,230 --> 00:00:41,530
Well, let's say you had a large
file and you want to put

18
00:00:41,530 --> 00:00:43,680
that file into MongoDB.

19
00:00:43,680 --> 00:00:47,690
MongoDB will break it up into
two different collections.

20
00:00:47,690 --> 00:00:50,530
One is a chunks collection.

21
00:00:50,530 --> 00:00:54,440
And in the chunks collection,
it will put one document for

22
00:00:54,440 --> 00:00:56,210
every 16 megabytes of data that

23
00:00:56,210 --> 00:00:57,220
exists within the document.

24
00:00:57,220 --> 00:00:59,700
So it will break it up into 16
megabyte chunks and put it

25
00:00:59,700 --> 00:01:01,970
into the database in
the collection.

26
00:01:01,970 --> 00:01:04,470
And then, there's a
files collection.

27
00:01:04,470 --> 00:01:07,470
And it will put a single
document in a small document

28
00:01:07,470 --> 00:01:10,880
that will describe the documents
that are put into

29
00:01:10,880 --> 00:01:12,350
the chunks collection.

30
00:01:12,350 --> 00:01:16,940
Now, the underscore ID that is
used in this files collection

31
00:01:16,940 --> 00:01:19,050
will be put into this
chunks collection

32
00:01:19,050 --> 00:01:20,090
for each of the chunks.

33
00:01:20,090 --> 00:01:23,300
They will each have a file ID
that corresponds to the

34
00:01:23,300 --> 00:01:25,490
underscore ID for the meta
document a document in the

35
00:01:25,490 --> 00:01:26,430
files collection.

36
00:01:26,430 --> 00:01:28,120
Now, let's look in
the example.

37
00:01:28,120 --> 00:01:32,070
I've got a video file in this
directory, video.mp4.

38
00:01:32,070 --> 00:01:35,460
If we look at this file,
we can see that

39
00:01:35,460 --> 00:01:37,360
it's about 95 megabytes.

40
00:01:37,360 --> 00:01:40,530
And we can open it up, and
you can see it's a

41
00:01:40,530 --> 00:01:42,060
video that can be played.

42
00:01:42,060 --> 00:01:43,970
And what we're going to do is
we're going to write a program

43
00:01:43,970 --> 00:01:47,513
that's going to put it into
MongoDB and then take it right

44
00:01:47,513 --> 00:01:48,130
out of MongoDB.

45
00:01:48,130 --> 00:01:51,760
It's actually going to put it
into this video copy file.

46
00:01:51,760 --> 00:01:54,570
I'll copy it into a file called
video copy which will

47
00:01:54,570 --> 00:01:55,330
be here when we're done.

48
00:01:55,330 --> 00:01:56,680
Right now it's not here.

49
00:01:56,680 --> 00:02:00,560
So let's look at the IDE and
go through the code.

50
00:02:00,560 --> 00:02:02,640
I've written a GridFSTest.

51
00:02:02,640 --> 00:02:05,180
You can see I've created
a new Mongo client.

52
00:02:05,180 --> 00:02:07,580
And then, I just
get my database

53
00:02:07,580 --> 00:02:09,530
which is called course.

54
00:02:09,530 --> 00:02:13,120
And now, I'm going to create a
Java file input stream called

55
00:02:13,120 --> 00:02:14,300
InputStream.

56
00:02:14,300 --> 00:02:17,850
And then, I'm going to create
a new GridFS object.

57
00:02:17,850 --> 00:02:20,620
And this doesn't really create
the GridFS system, it just

58
00:02:20,620 --> 00:02:22,550
gives you an object that
lets you manipulate it.

59
00:02:22,550 --> 00:02:25,910
And then in this case, after I
associate it with the DB and I

60
00:02:25,910 --> 00:02:28,780
also have to give it a name
which is called videos.

61
00:02:28,780 --> 00:02:32,240
And now as we go down, we're
going to open up this video

62
00:02:32,240 --> 00:02:34,240
file, video.mp4.

63
00:02:34,240 --> 00:02:37,005
And there's some exception logic
to make sure that the

64
00:02:37,005 --> 00:02:38,300
file can be found.

65
00:02:38,300 --> 00:02:42,000
And then, we're going to create
a new handle for a new

66
00:02:42,000 --> 00:02:43,250
GridFS object.

67
00:02:43,250 --> 00:02:46,660
And we're going to do this using
this create file method

68
00:02:46,660 --> 00:02:47,440
right here.

69
00:02:47,440 --> 00:02:53,440
Video is a GridFS input file,
and videos is a GridFS object.

70
00:02:53,440 --> 00:02:57,260
So we're taking that GridFS
object that we created up here

71
00:02:57,260 --> 00:02:59,800
and we're going to call
create file on it.

72
00:02:59,800 --> 00:03:03,550
And we're going to give it the
input stream to this file on

73
00:03:03,550 --> 00:03:06,340
disk, this video
that mp4 file.

74
00:03:06,340 --> 00:03:09,980
And then, just because we want
the name to persist inside

75
00:03:09,980 --> 00:03:13,610
MongoDB, we're going to tell it
that it's called video.mp4.

76
00:03:13,610 --> 00:03:17,260
Because otherwise MongoDB would
have no idea what file

77
00:03:17,260 --> 00:03:20,010
was originally associated
with this input stream.

78
00:03:20,010 --> 00:03:22,330
Now, GridFS has a facility to
let you put other metadata

79
00:03:22,330 --> 00:03:23,780
inside the object as well.

80
00:03:23,780 --> 00:03:24,760
So we're going to do that.

81
00:03:24,760 --> 00:03:29,220
What I've done is I've created a
new basic db object, and I'm

82
00:03:29,220 --> 00:03:32,290
going to have a description,
which is Jennifer singing.

83
00:03:32,290 --> 00:03:35,060
And then, I created an array
list here of tags.

84
00:03:35,060 --> 00:03:37,400
I'm adding some tags to
it, singing an opera.

85
00:03:37,400 --> 00:03:40,400
And I'm going to pen that
to the metadata as well.

86
00:03:40,400 --> 00:03:44,570
And then, I'm going to set the
metadata on my video object.

87
00:03:44,570 --> 00:03:47,590
This is the GridFS input
file object.

88
00:03:47,590 --> 00:03:49,250
And then, I'm going
to save it.

89
00:03:49,250 --> 00:03:51,030
And that's going to save
it to the collection.

90
00:03:51,030 --> 00:03:54,120
And after that, just for grins,
I'm going to print out

91
00:03:54,120 --> 00:03:57,430
the object ID that was assigned
to the document in

92
00:03:57,430 --> 00:03:58,820
the files collection.

93
00:03:58,820 --> 00:03:59,970
Then I just say that
I saved it.

94
00:03:59,970 --> 00:04:01,430
And now, I'm going to
read it back out.

95
00:04:01,430 --> 00:04:02,600
So how do I read it back out?

96
00:04:02,600 --> 00:04:04,340
Well, I created a new
type of object

97
00:04:04,340 --> 00:04:06,860
called a GridFS DB file.

98
00:04:06,860 --> 00:04:08,910
You'll notice this is actually
a different type of object

99
00:04:08,910 --> 00:04:10,110
than I used to input them.

100
00:04:10,110 --> 00:04:13,850
So it was a GridFS input file
when I wanted to put something

101
00:04:13,850 --> 00:04:18,630
into MongoDB, but it is a GridFS
DB file when I take

102
00:04:18,630 --> 00:04:20,380
something out of MongoDB.

103
00:04:20,380 --> 00:04:22,870
And I'm going to
do a Find one.

104
00:04:22,870 --> 00:04:26,170
And I'm going to find the
file named video.mp4.

105
00:04:26,170 --> 00:04:28,560
And I'm able to do that because
I actually stuck that

106
00:04:28,560 --> 00:04:31,630
information into it over here
when I associated this file

107
00:04:31,630 --> 00:04:34,360
name with this GridFS object.

108
00:04:34,360 --> 00:04:37,170
And after I do my Find one, I'm
just going to open up an

109
00:04:37,170 --> 00:04:40,270
output stream with a name
called videocopy.mp4.

110
00:04:40,270 --> 00:04:43,750
And then, I'm going to tell
GridFS to write it out to the

111
00:04:43,750 --> 00:04:45,120
output stream onto disk.

112
00:04:45,120 --> 00:04:46,500
And that's the whole program.

113
00:04:46,500 --> 00:04:48,670
So let's run that and
see what happens.

114
00:04:48,670 --> 00:04:53,405
You see that it ran, it has an
object ID starting on 513, it

115
00:04:53,405 --> 00:04:54,880
saves it back out.

116
00:04:54,880 --> 00:04:56,890
Let's look in the directory,
see what we find.

117
00:04:56,890 --> 00:05:00,060
So now we see there's
a video copy.

118
00:05:00,060 --> 00:05:04,300
And if we open videocopy.mp4,
I'll bring this over to show

119
00:05:04,300 --> 00:05:07,420
you, but there it is it's the
same video as before.

120
00:05:07,420 --> 00:05:09,510
So it seems to be intact.

121
00:05:09,510 --> 00:05:12,820
Now, let's look at what happened
within MongoDB.

122
00:05:12,820 --> 00:05:14,610
So we are in the course
database.

123
00:05:14,610 --> 00:05:19,060
So use course, and we're going
to show collections.

124
00:05:19,060 --> 00:05:21,850
And now, we see there are two
new collections in here,

125
00:05:21,850 --> 00:05:23,550
chunks and files.

126
00:05:23,550 --> 00:05:26,730
Let's look at the files
collection, db.videos.files.

127
00:05:26,730 --> 00:05:29,940

128
00:05:29,940 --> 00:05:32,120
There's actually one object
inside there, it's the

129
00:05:32,120 --> 00:05:33,860
metadata describing
this video file.

130
00:05:33,860 --> 00:05:37,820
You can see that the video.mp4
file name has persisted,

131
00:05:37,820 --> 00:05:40,630
because I associated it with
the GridFS object.

132
00:05:40,630 --> 00:05:42,230
There's an upload time.

133
00:05:42,230 --> 00:05:45,320
And the metadata that I
put in is right here.

134
00:05:45,320 --> 00:05:48,030
So the description, Jennifer
singing, and the two tags are

135
00:05:48,030 --> 00:05:50,690
sitting here in the metadata
collection.

136
00:05:50,690 --> 00:05:53,460
And I could query on this files
collection using that

137
00:05:53,460 --> 00:05:56,250
metadata if I wanted to find
this object again versus using

138
00:05:56,250 --> 00:05:57,880
the file name which
is what I used.

139
00:05:57,880 --> 00:06:00,610
Now there's the object
ID, 513.

140
00:06:00,610 --> 00:06:02,940
So let's look at this other
collection which is the chunks

141
00:06:02,940 --> 00:06:07,290
collection and see what
we see there.

142
00:06:07,290 --> 00:06:09,490
And we're going to see a
whole bunch of stuff.

143
00:06:09,490 --> 00:06:10,910
I'm going to print
it out again.

144
00:06:10,910 --> 00:06:15,780
But this time, I'm going to
suppress printing out the

145
00:06:15,780 --> 00:06:18,980
actual data field to make it a
little bit easier to read.

146
00:06:18,980 --> 00:06:21,620
And I'm going to print
it out pretty.

147
00:06:21,620 --> 00:06:24,820
And you can see that I've got
19 chunks for this object.

148
00:06:24,820 --> 00:06:26,110
I'm not sure if they start
with zero or not.

149
00:06:26,110 --> 00:06:27,590
Let's see if they
start with zero.

150
00:06:27,590 --> 00:06:28,830
Like all good things in
computer science,

151
00:06:28,830 --> 00:06:29,530
they start with zero.

152
00:06:29,530 --> 00:06:30,510
So yes.

153
00:06:30,510 --> 00:06:32,680
So there are exactly
20 chunks.

154
00:06:32,680 --> 00:06:34,455
And I've suppressed the data
field so it looks like these

155
00:06:34,455 --> 00:06:35,200
are small documents.

156
00:06:35,200 --> 00:06:38,100
But they're actually probably
pretty close to 16 megabytes.

157
00:06:38,100 --> 00:06:42,550
And you can see that the file ID
here is actually the object

158
00:06:42,550 --> 00:06:45,160
ID from the files collection.

159
00:06:45,160 --> 00:06:48,030
And that's how they associate
the different chunks with the

160
00:06:48,030 --> 00:06:50,130
original files collection.

161
00:06:50,130 --> 00:06:53,090
Now, I just want to point out
that there's nothing special

162
00:06:53,090 --> 00:06:56,070
about that file name field
in the files collection.

163
00:06:56,070 --> 00:06:59,650
And if I run the program again,
I will have two chunks

164
00:06:59,650 --> 00:07:00,410
with that file name.

165
00:07:00,410 --> 00:07:02,560
So let me just show you
how that would work.

166
00:07:02,560 --> 00:07:03,780
So I'm going to run it again.

167
00:07:03,780 --> 00:07:06,580
And now, I'm going to go
back to my terminal.

168
00:07:06,580 --> 00:07:10,020
And then, you can see now I have
two documents both with

169
00:07:10,020 --> 00:07:11,570
the same file name.

170
00:07:11,570 --> 00:07:13,550
So it's up to you to keep those
file names unique if

171
00:07:13,550 --> 00:07:16,190
that's the way you want to
search on these GridFS objects

172
00:07:16,190 --> 00:07:16,880
in the future.

173
00:07:16,880 --> 00:07:18,640
But, of course, they have
different object IDs.

174
00:07:18,640 --> 00:07:22,130
And it's these object IDs that
actually tie together the

175
00:07:22,130 --> 00:07:24,350
metadata with the chunks
themselves.

176
00:07:24,350 --> 00:07:26,250
All right, let's do a quiz.

177
00:07:26,250 --> 00:07:27,330
Which of the following
statements

178
00:07:27,330 --> 00:07:29,400
are true about GridFS?

179
00:07:29,400 --> 00:07:32,020
GridFS stores large blobs in a
single collection by breaking

180
00:07:32,020 --> 00:07:33,990
up the file into multiple
pieces.

181
00:07:33,990 --> 00:07:36,750
Each GridFS document is given
a unique file name.

182
00:07:36,750 --> 00:07:39,610
GridFS stores large blobs in
two collections, one for

183
00:07:39,610 --> 00:07:41,520
metadata and one for
the blob chunks.

184
00:07:41,520 --> 00:07:44,090
And GridFS compresses
your file on disk.

185
00:07:44,090 --> 00:07:44,630
All right?

186
00:07:44,630 --> 00:07:46,060
So which one of these is true?

187
00:07:46,060 --> 00:07:48,200
And I know that one of them I
didn't actually give you the

188
00:07:48,200 --> 00:07:50,570
answer to, so you'll have
to guess on that one.

189
00:07:50,570 --> 00:07:51,820
So just do your best.

190
00:07:51,820 --> 00:07:52,810