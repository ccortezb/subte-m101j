1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:03,090
So in the last lesson, we talked
about fine-grained

3
00:00:03,090 --> 00:00:05,150
control over writes.

4
00:00:05,150 --> 00:00:07,100
Now I want to talk about
fine-grained

5
00:00:07,100 --> 00:00:08,960
control over reads.

6
00:00:08,960 --> 00:00:13,370
So by default, as you might
imagine, all reads are sent to

7
00:00:13,370 --> 00:00:14,560
the primary.

8
00:00:14,560 --> 00:00:18,390
So when you do a read from your
client application, the

9
00:00:18,390 --> 00:00:21,360
query is sent to the primary and
the response comes back to

10
00:00:21,360 --> 00:00:22,680
the primary.

11
00:00:22,680 --> 00:00:25,050
And this is the default because
it makes applications

12
00:00:25,050 --> 00:00:26,840
easy to reason about.

13
00:00:26,840 --> 00:00:29,710
Let's imagine that I'm reading
from a secondary and my

14
00:00:29,710 --> 00:00:32,960
queries are going here
and here while my

15
00:00:32,960 --> 00:00:34,980
writes are going here.

16
00:00:34,980 --> 00:00:37,630
What's possible is that you
could do an insert into the

17
00:00:37,630 --> 00:00:39,960
primary and then do a query
from either of the

18
00:00:39,960 --> 00:00:40,570
secondaries.

19
00:00:40,570 --> 00:00:43,340
And because of replication lag
from the primary to the

20
00:00:43,340 --> 00:00:46,150
secondary you may not
read your own write.

21
00:00:46,150 --> 00:00:49,740
So you do the insert and then
you do a query, expecting to

22
00:00:49,740 --> 00:00:52,730
have the query result include
the document you just inserted

23
00:00:52,730 --> 00:00:54,270
and it's not there.

24
00:00:54,270 --> 00:00:56,900
So that's why primary reads are
preferred because it makes

25
00:00:56,900 --> 00:00:59,530
your applications easier
to reason about.

26
00:00:59,530 --> 00:01:02,050
However there are situations
where reading from

27
00:01:02,050 --> 00:01:03,520
secondaries is OK.

28
00:01:03,520 --> 00:01:06,250
Sometimes your application can
tolerate a situation where

29
00:01:06,250 --> 00:01:08,640
you're not necessarily reading
your own writes.

30
00:01:08,640 --> 00:01:10,625
For example, you might have one
application doing inserts

31
00:01:10,625 --> 00:01:14,010
and a totally different
application doing queries, in

32
00:01:14,010 --> 00:01:16,880
which case they're not
coordinated anyway and having

33
00:01:16,880 --> 00:01:19,330
a little replication
lag is OK.

34
00:01:19,330 --> 00:01:22,230
We call this eventual
consistency, though, because

35
00:01:22,230 --> 00:01:25,780
it breaks the strong consistency
guarantees of

36
00:01:25,780 --> 00:01:27,920
reading your own writes
from the primary.

37
00:01:27,920 --> 00:01:30,750
It's eventually consistent
because the inserts are

38
00:01:30,750 --> 00:01:33,650
eventually guaranteed to make
it to the secondaries, but

39
00:01:33,650 --> 00:01:36,490
since it's done with a
background replication thread

40
00:01:36,490 --> 00:01:38,990
you don't know at what point the
replication will actually

41
00:01:38,990 --> 00:01:42,780
complete and the writes will be
visible on the secondaries.

42
00:01:42,780 --> 00:01:45,630
But if you know what you're
doing you can control where

43
00:01:45,630 --> 00:01:48,080
your reads go to besides
the primary.

44
00:01:48,080 --> 00:01:50,070
We call this read preference.

45
00:01:50,070 --> 00:01:51,690
I'll just say read
pref for short.

46
00:01:51,690 --> 00:01:54,690
And there's several different
read preferences.

47
00:01:54,690 --> 00:01:57,230
So the default as primary,
which sends all

48
00:01:57,230 --> 00:01:59,020
queries to the primary.

49
00:01:59,020 --> 00:02:02,370
And that includes counts and
other query-like things.

50
00:02:02,370 --> 00:02:06,590
There is secondary, which will
send all reads to randomly

51
00:02:06,590 --> 00:02:08,169
selected secondary.

52
00:02:08,169 --> 00:02:11,480
So either this or this.

53
00:02:11,480 --> 00:02:13,580
There's secondary preferred.

54
00:02:13,580 --> 00:02:16,520
What that does it will send
right to secondaries if there

55
00:02:16,520 --> 00:02:17,680
is a secondary.

56
00:02:17,680 --> 00:02:18,550
But if possible--

57
00:02:18,550 --> 00:02:21,200
if both the secondaries
are down for example--

58
00:02:21,200 --> 00:02:24,160
it will send the writes
to the primary.

59
00:02:24,160 --> 00:02:26,690
On the other hand there's
primary preferred, which will

60
00:02:26,690 --> 00:02:28,490
send all writes to the primary,
unless there's no

61
00:02:28,490 --> 00:02:31,390
primary like during a failover,
in which case it

62
00:02:31,390 --> 00:02:33,530
will send writes to
the secondary.

63
00:02:33,530 --> 00:02:35,890
And finally there's nearest.

64
00:02:35,890 --> 00:02:39,130
Nearest will send writes to
secondary or primary, it won't

65
00:02:39,130 --> 00:02:40,750
distinguish between them.

66
00:02:40,750 --> 00:02:43,530
For all of these read
preferences, except for

67
00:02:43,530 --> 00:02:46,220
primary, the client
application--

68
00:02:46,220 --> 00:02:48,080
the driver I should say--

69
00:02:48,080 --> 00:02:51,400
will look at the ping times
between the client application

70
00:02:51,400 --> 00:02:55,280
and each of the members of the
replica set, and will only

71
00:02:55,280 --> 00:02:59,110
send reads to members of the
replica set that are within a

72
00:02:59,110 --> 00:03:02,270
certain latency window
of the fastest.

73
00:03:02,270 --> 00:03:07,260
So let's say, for example, the
ping time to this secondary is

74
00:03:07,260 --> 00:03:08,360
five milliseconds.

75
00:03:08,360 --> 00:03:10,640
The primary is eight
milliseconds.

76
00:03:10,640 --> 00:03:13,900
But this secondary, say it's in
a different data center, is

77
00:03:13,900 --> 00:03:15,760
50 milliseconds.

78
00:03:15,760 --> 00:03:18,180
So if you use the read
preference of nearest, the

79
00:03:18,180 --> 00:03:20,800
driver will see that this
secondary has the fastest ping

80
00:03:20,800 --> 00:03:22,320
time of 5 milliseconds.

81
00:03:22,320 --> 00:03:26,550
It'll scatter the reads to all
servers that are within 15

82
00:03:26,550 --> 00:03:27,880
milliseconds of the fastest.

83
00:03:27,880 --> 00:03:31,340
So it will distribute them
between the primary and the

84
00:03:31,340 --> 00:03:34,920
secondary because 8 is 3
milliseconds lower than 5.

85
00:03:34,920 --> 00:03:38,240
But it won't send any to this
secondary because there's 45

86
00:03:38,240 --> 00:03:41,240
milliseconds between 50 and 5.

87
00:03:41,240 --> 00:03:43,530
And this is dynamically
calculated by the driver.

88
00:03:43,530 --> 00:03:46,010
It keeps sending pings every
once in while to each of the

89
00:03:46,010 --> 00:03:48,430
members of the replica
set determining what

90
00:03:48,430 --> 00:03:51,840
the ping times are.

91
00:03:51,840 --> 00:03:54,160
OK, so that's the basics
of read preference.

92
00:03:54,160 --> 00:03:57,430
Let's look at what it looks like
in a Java application.

93
00:03:57,430 --> 00:04:01,360
So here is again our simple
application with MongoClient

94
00:04:01,360 --> 00:04:03,440
DB and DB Collection.

95
00:04:03,440 --> 00:04:07,740
In this case I have a query,
I do a Find, and I

96
00:04:07,740 --> 00:04:10,190
print out the results.

97
00:04:10,190 --> 00:04:13,330
If I want to change the read
preference I can do that by

98
00:04:13,330 --> 00:04:14,650
setting it on the Find.

99
00:04:14,650 --> 00:04:17,680
So I call Set Read Preference,
and let's say

100
00:04:17,680 --> 00:04:19,410
we want to do nearest.

101
00:04:19,410 --> 00:04:22,970
So it's Set Read Preference,
and there are a bunch of

102
00:04:22,970 --> 00:04:25,460
static methods in the read
preference class for each of

103
00:04:25,460 --> 00:04:27,260
the different kinds of
read preferences.

104
00:04:27,260 --> 00:04:30,860
So readpreference.nearest is
what we're going to use here.

105
00:04:30,860 --> 00:04:33,990
As with write concern, we can
set the read preference at

106
00:04:33,990 --> 00:04:34,760
multiple levels.

107
00:04:34,760 --> 00:04:37,550
So here, I'm setting it on the
cursor, but I can set a

108
00:04:37,550 --> 00:04:41,250
default read preference
for my collection.

109
00:04:41,250 --> 00:04:44,210
So I can make this primary
preferred.

110
00:04:44,210 --> 00:04:49,020
I can set a read preference on
my DB primary, and I can also

111
00:04:49,020 --> 00:04:52,020
set a default on the
client itself.

112
00:04:52,020 --> 00:04:54,450
So it's very easy to use read

113
00:04:54,450 --> 00:04:56,460
preferences in the Java driver.

114
00:04:56,460 --> 00:04:58,880
As I said, there's these static
methods in the read

115
00:04:58,880 --> 00:05:01,660
preference class returning the
various different kinds of

116
00:05:01,660 --> 00:05:03,080
read preferences.

117
00:05:03,080 --> 00:05:05,310
So primary, primary preferred,
nearest,

118
00:05:05,310 --> 00:05:08,010
secondary, secondary preferred.

119
00:05:08,010 --> 00:05:10,910
And you can set read preference
at any level from

120
00:05:10,910 --> 00:05:13,620
MongoClient client to the DB, to
the DB Collection, all the

121
00:05:13,620 --> 00:05:16,715
way to the individual query
on the DB cursor.

122
00:05:16,715 --> 00:05:18,240
OK, no quiz for this one.

123
00:05:18,240 --> 00:05:19,490